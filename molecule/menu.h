// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* menu.h
   Generated by wsdl2h 2.8.28 from menu.xsd menu.item.xsd and typemap.dat
   2017-11-22 15:57:53 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on menu.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http:///menu.ecore"
ns2 = "http:///menu/item.ecore"

*/

#define SOAP_NAMESPACE_OF_ns1	"http:///menu.ecore"
//gsoap ns1   schema namespace:	http:///menu.ecore
//gsoap ns1   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns2	"http:///menu/item.ecore"
//gsoap ns2   schema namespace:	http:///menu/item.ecore
//gsoap ns2   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Primitive built-in type "xs:ID".
typedef std::string xsd__ID;

/// Primitive built-in type "xs:Name".
typedef std::string xsd__Name;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__Menu.
class ns1__Menu;

//  Forward declaration of class ns2__Item.
class ns2__Item;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http:///menu.ecore                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http:///menu/item.ecore                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http:///menu.ecore                                                       *
 *                                                                            *
\******************************************************************************/

/// @brief "http:///menu.ecore":Menu is a complexType.
///
/// class ns1__Menu operations:
/// - ns1__Menu* soap_new_ns1__Menu(soap*) allocate
/// - ns1__Menu* soap_new_ns1__Menu(soap*, int num) allocate array
/// - ns1__Menu* soap_new_req_ns1__Menu(soap*, ...) allocate, set required members
/// - ns1__Menu* soap_new_set_ns1__Menu(soap*, ...) allocate, set all public members
/// - ns1__Menu::soap_default(soap*) reset members to default
/// - int soap_read_ns1__Menu(soap*, ns1__Menu*) deserialize from a stream
/// - int soap_write_ns1__Menu(soap*, ns1__Menu*) serialize to a stream
/// - ns1__Menu* ns1__Menu::soap_dup(soap*) returns deep copy of ns1__Menu, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Menu::soap_del() deep deletes ns1__Menu data members, use only after ns1__Menu::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__Menu
{ public:
/// Vector of ns2__Item* of length 0..unbounded.
    std::vector<ns2__Item*             > item                           0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http:///menu/item.ecore                                                  *
 *                                                                            *
\******************************************************************************/

/// @brief "http:///menu/item.ecore":Item is a complexType.
///
/// class ns2__Item operations:
/// - ns2__Item* soap_new_ns2__Item(soap*) allocate
/// - ns2__Item* soap_new_ns2__Item(soap*, int num) allocate array
/// - ns2__Item* soap_new_req_ns2__Item(soap*, ...) allocate, set required members
/// - ns2__Item* soap_new_set_ns2__Item(soap*, ...) allocate, set all public members
/// - ns2__Item::soap_default(soap*) reset members to default
/// - int soap_read_ns2__Item(soap*, ns2__Item*) deserialize from a stream
/// - int soap_write_ns2__Item(soap*, ns2__Item*) serialize to a stream
/// - ns2__Item* ns2__Item::soap_dup(soap*) returns deep copy of ns2__Item, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__Item::soap_del() deep deletes ns2__Item data members, use only after ns2__Item::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__Item
{ public:
/// Element "menu" of XSD type "http:///menu.ecore":Menu.
    ns1__Menu*                           menu                           0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
/// Attribute "label" of XSD type xs:Name.
   @xsd__Name                            label                          1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http:///menu.ecore                                                       *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http:///menu.ecore":Menu of XSD type "http:///menu.ecore":Menu.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http:///menu.ecore                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http:///menu/item.ecore                                                  *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http:///menu/item.ecore":Item of XSD type "http:///menu/item.ecore":Item.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http:///menu/item.ecore                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http:///menu.ecore"

  - <ns1:Menu> (use wsdl2h option -g to auto-generate type _ns1__Menu)

@section ns2 Top-level root elements of schema "http:///menu/item.ecore"

  - <ns2:Item> (use wsdl2h option -g to auto-generate type _ns2__Item)

*/

/* End of menu.h */
